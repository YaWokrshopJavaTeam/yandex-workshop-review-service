{
	"info": {
		"_postman_id": "71065fa4-dc84-4c50-b0d2-9184ebee1407",
		"name": "review-service-likes-and-analytics",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32172174"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "String length restrict",
					"item": [
						{
							"name": "Добавление отзыва с username меньше 2 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.username = rnd.getWord(1);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва с username == 2 знака",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.username = rnd.getWord(2);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.updatedOn).to.be.null;\r",
											"    pm.expect(target.createdOn).to.not.be.null;\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должна быть равна 0');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва с username больше 250 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.username = rnd.getWord(251);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва с username == 250 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.username = rnd.getWord(250);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.updatedOn).to.be.null;\r",
											"    pm.expect(target.createdOn).to.not.be.null;\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должна быть равна 0');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва с title больше 120 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.title = rnd.getWord(121);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва с title == 120 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.title = rnd.getWord(120);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.updatedOn).to.be.null;\r",
											"    pm.expect(target.createdOn).to.not.be.null;\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должна быть равна 0');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва без title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.title = null;\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.updatedOn).to.be.null;\r",
											"    pm.expect(target.createdOn).to.not.be.null;\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должна быть равна 0');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва с content меньше 3 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.content = rnd.getWord(2);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва с content == 3 знака",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.content = rnd.getWord(3);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.updatedOn).to.be.null;\r",
											"    pm.expect(target.createdOn).to.not.be.null;\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должна быть равна 0');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва с content больше 10000 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.content = rnd.getWord(10001);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление отзыва с content == 10000 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let review;\r",
											"    try {\r",
											"        review = rnd.getReview();\r",
											"        review.content = rnd.getWord(10000);\r",
											"        console.log(\"review.authorId = \" + review.authorId);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(review),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.updatedOn).to.be.null;\r",
											"    pm.expect(target.createdOn).to.not.be.null;\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должна быть равна 0');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с username < 2 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.username = rnd.getWord(1);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с username == 2 знака",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.username = rnd.getWord(2);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const reviewId = pm.collectionVariables.get('reviewId');\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(target.updatedOn).to.not.be.null;\r",
											"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с username > 250 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.username = rnd.getWord(251);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с username == 250 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.username = rnd.getWord(250);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const reviewId = pm.collectionVariables.get('reviewId');\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(target.updatedOn).to.not.be.null;\r",
											"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с username == null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.username = null;\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('savedReview', review);\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const savedReview = pm.collectionVariables.get('savedReview');\r",
											"const reviewId = pm.collectionVariables.get('reviewId');\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(target.updatedOn).to.not.be.null;\r",
											"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(savedReview.username).equal(target.username, 'Имя автора должно соответствовать сохранённому ранее');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с title > 120 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.title = rnd.getWord(121);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с title == 120 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.title = rnd.getWord(120);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const reviewId = pm.collectionVariables.get('reviewId');\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(target.updatedOn).to.not.be.null;\r",
											"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с title == null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.title = null;\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('savedReview', review);\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const savedReview = pm.collectionVariables.get('savedReview');\r",
											"const reviewId = pm.collectionVariables.get('reviewId');\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(savedReview.title).equal(target.title, 'Заголовок отзыва должен соответствовать сохранённому ранее');\r",
											"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(target.updatedOn).to.not.be.null;\r",
											"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с пустым title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.title = '';\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('savedReview', review);\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const reviewId = pm.collectionVariables.get('reviewId');\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(target.updatedOn).to.not.be.null;\r",
											"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с content > 10000 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.content = rnd.getWord(10001);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с content == 10000 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.content = rnd.getWord(10000);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const reviewId = pm.collectionVariables.get('reviewId');\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(target.updatedOn).to.not.be.null;\r",
											"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с content < 3 знаков",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.content = rnd.getWord(2);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с content == 3 знака",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.content = rnd.getWord(3);\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const reviewId = pm.collectionVariables.get('reviewId');\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(target.updatedOn).to.not.be.null;\r",
											"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление отзыва с content == null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let review = await api.addReview(rnd.getReview());\r",
											"        let updatedReview = rnd.getReview();\r",
											"\r",
											"        updatedReview.content = null;\r",
											"\r",
											"        updatedReview.authorId = review.authorId;\r",
											"        updatedReview.eventId = review.eventId;\r",
											"        updatedReview.createdOn = review.createdOn;\r",
											"        updatedReview.mark = review.mark;\r",
											"        pm.collectionVariables.set('savedReview', review);\r",
											"        pm.collectionVariables.set('response', updatedReview);\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: updatedReview,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const savedReview = pm.collectionVariables.get('savedReview');\r",
											"const reviewId = pm.collectionVariables.get('reviewId');\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('authorId');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('username');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('content');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('updatedOn');\r",
											"pm.expect(target).to.have.property('mark');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(target.updatedOn).to.not.be.null;\r",
											"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
											"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
											"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
											"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
											"    pm.expect(savedReview.content).equal(target.content, 'Содержание отзыва должно соответствовать сохранённому ранее');\r",
											"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{authorId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/:reviewId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":reviewId"
									],
									"variable": [
										{
											"key": "reviewId",
											"value": "{{reviewId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Добавление отзыва без authorId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let review;\r",
									"    try {\r",
									"        review = rnd.getReview();\r",
									"        review.authorId = null;\r",
									"        console.log(\"review.authorId = \" + review.authorId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(review),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление отзыва с authorId меньше либо равным 0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let review;\r",
									"    try {\r",
									"        review = rnd.getReview();\r",
									"        review.authorId = 0;\r",
									"        console.log(\"review.authorId = \" + review.authorId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(review),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление отзыва с eventId меньше либо равным 0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let review;\r",
									"    try {\r",
									"        review = rnd.getReview();\r",
									"        review.eventId = 0;\r",
									"        console.log(\"review.authorId = \" + review.authorId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(review),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление отзыва с null username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let review;\r",
									"    try {\r",
									"        review = rnd.getReview();\r",
									"        review.username = null;\r",
									"        console.log(\"review.authorId = \" + review.authorId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(review),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление отзыва с пустым username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let review;\r",
									"    try {\r",
									"        review = rnd.getReview();\r",
									"        review.username = ' ';\r",
									"        console.log(\"review.authorId = \" + review.authorId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(review),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление отзыва без eventId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let review;\r",
									"    try {\r",
									"        review = rnd.getReview();\r",
									"        review.eventId = null;\r",
									"        console.log(\"review.authorId = \" + review.authorId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(review),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление отзыва с изменёнными authorId и eventId в DTO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        let review = await api.addReview(rnd.getReview());\r",
									"        let updatedReview = rnd.getReview();\r",
									"        updatedReview.authorId = _.random(1001, 2000);\r",
									"        updatedReview.eventId = _.random(1001, 2000);\r",
									"        updatedReview.createdOn = review.createdOn;\r",
									"        updatedReview.mark = review.mark;\r",
									"        pm.collectionVariables.set('savedReview', review);\r",
									"        pm.collectionVariables.set('response', updatedReview);\r",
									"        pm.collectionVariables.set('authorId', review.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: updatedReview,\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const savedReview = pm.collectionVariables.get('savedReview');\r",
									"const reviewId = pm.collectionVariables.get('reviewId');\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('username');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('content');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('updatedOn');\r",
									"pm.expect(target).to.have.property('mark');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
									"    pm.expect(target.updatedOn).to.not.be.null;\r",
									"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
									"    pm.expect(savedReview.authorId).equal(target.authorId, 'Id автора должно соответствовать сохраненному ранее');\r",
									"    pm.expect(savedReview.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать сохраненному ранее');\r",
									"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
									"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{authorId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews/:reviewId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								":reviewId"
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление отзыва с несуществующими reviewId, authorId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        let review = await api.addReview(rnd.getReview());\r",
									"        let updatedReview = rnd.getReview();\r",
									"        updatedReview.authorId = review.authorId;\r",
									"        updatedReview.eventId = review.eventId;\r",
									"        updatedReview.createdOn = review.createdOn;\r",
									"        updatedReview.mark = review.mark;\r",
									"        pm.collectionVariables.set('authorId', 999999);\r",
									"        pm.collectionVariables.set('reviewId', 999999);\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: updatedReview,\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{authorId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews/:reviewId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								":reviewId"
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение несуществующего отзыва по id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set('reviewId', 99999999);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/:reviewId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								":reviewId"
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить отзыв по неправильному id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set('reviewId', 9999999);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{authorId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reviews/:reviewId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								":reviewId"
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить отзыв по id не автором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const review = await api.addReview(rnd.getReview());\r",
									"        const foundedReview = await api.findReview(review.id);\r",
									"        pm.collectionVariables.set('response', foundedReview);\r",
									"        pm.collectionVariables.set('authorId', 999999999);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"let source = pm.collectionVariables.get('response');\r",
									"\r",
									"pm.test(\"Подборка должна быть найдена до удаления\", function () {\r",
									"    pm.expect(source).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{authorId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reviews/:reviewId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								":reviewId"
							],
							"variable": [
								{
									"key": "reviewId",
									"value": "{{reviewId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Лайки и дизлайки",
			"item": [
				{
					"name": "Ошибки при работе с лайками / дизлайками",
					"item": [
						{
							"name": "Лайк от автора отзыва",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const review = await api.addReview(rnd.getReview());\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('evaluatorId', pm.collectionVariables.get('authorId'));\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{evaluatorId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reviews/{{reviewId}}/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										"{{reviewId}}",
										"like"
									]
								}
							},
							"response": []
						},
						{
							"name": "Дизлайк от автора отзыва",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const review = await api.addReview(rnd.getReview());\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('evaluatorId', pm.collectionVariables.get('authorId'));\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{evaluatorId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reviews/{{reviewId}}/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										"{{reviewId}}",
										"dislike"
									]
								}
							},
							"response": []
						},
						{
							"name": "Повторно поставить лайк отзыву",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const review = await api.addReview(rnd.getReview());\r",
											"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        let response\r",
											"        let body\r",
											"        const evaluator = pm.collectionVariables.get('evaluatorId') + '';\r",
											"        const req = {\r",
											"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/like\",\r",
											"                method: \"PUT\",\r",
											"                header: { \"Accept\": \"application/json\",\r",
											"                \"Content-Type\": \"application/json\", \r",
											"                \"X-Review-User-Id\": evaluator },\r",
											"                body: body == null ? \"\" : JSON.stringify(body)\r",
											"                };\r",
											"\r",
											"        pm.sendRequest(req, (error, response) => {\r",
											"            if (error) throw new Error(error);\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{evaluatorId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reviews/{{reviewId}}/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										"{{reviewId}}",
										"like"
									]
								}
							},
							"response": []
						},
						{
							"name": "Повторно поставить дизлайк отзыву",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const review = await api.addReview(rnd.getReview());\r",
											"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        let response\r",
											"        let body\r",
											"        const evaluator = pm.collectionVariables.get('evaluatorId') + '';\r",
											"        const req = {\r",
											"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
											"                method: \"PUT\",\r",
											"                header: { \"Accept\": \"application/json\",\r",
											"                \"Content-Type\": \"application/json\", \r",
											"                \"X-Review-User-Id\": evaluator },\r",
											"                body: body == null ? \"\" : JSON.stringify(body)\r",
											"                };\r",
											"\r",
											"        pm.sendRequest(req, (error, response) => {\r",
											"            if (error) throw new Error(error);\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{evaluatorId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reviews/{{reviewId}}/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										"{{reviewId}}",
										"dislike"
									]
								}
							},
							"response": []
						},
						{
							"name": "Поставить лайк а удалить дизлайк отзывa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const review = await api.addReview(rnd.getReview());\r",
											"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        let response\r",
											"        let body\r",
											"        const evaluator = pm.collectionVariables.get('evaluatorId') + '';\r",
											"        const req = {\r",
											"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/like\",\r",
											"                method: \"PUT\",\r",
											"                header: { \"Accept\": \"application/json\",\r",
											"                \"Content-Type\": \"application/json\", \r",
											"                \"X-Review-User-Id\": evaluator },\r",
											"                body: body == null ? \"\" : JSON.stringify(body)\r",
											"                };\r",
											"\r",
											"        pm.sendRequest(req, (error, response) => {\r",
											"            if (error) throw new Error(error);\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{evaluatorId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reviews/{{reviewId}}/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										"{{reviewId}}",
										"dislike"
									]
								}
							},
							"response": []
						},
						{
							"name": "Поставить дизлайк а удалить лайк отзыва",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const review = await api.addReview(rnd.getReview());\r",
											"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
											"        pm.collectionVariables.set('authorId', review.authorId);\r",
											"        pm.collectionVariables.set('reviewId', review.id);\r",
											"\r",
											"        let response\r",
											"        let body\r",
											"        const evaluator = pm.collectionVariables.get('evaluatorId') + '';\r",
											"        const req = {\r",
											"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
											"                method: \"PUT\",\r",
											"                header: { \"Accept\": \"application/json\",\r",
											"                \"Content-Type\": \"application/json\", \r",
											"                \"X-Review-User-Id\": evaluator },\r",
											"                body: body == null ? \"\" : JSON.stringify(body)\r",
											"                };\r",
											"\r",
											"        pm.sendRequest(req, (error, response) => {\r",
											"            if (error) throw new Error(error);\r",
											"        });\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            // выполняем наш скрипт\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Review-User-Id",
										"value": "{{evaluatorId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reviews/{{reviewId}}/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										"{{reviewId}}",
										"like"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Добавить лайк отзыву",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const review = await api.addReview(rnd.getReview());\r",
									"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
									"        pm.collectionVariables.set('authorId', review.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    if (error) throw new Error(error);\r",
									"    pm.test(\"Количество лайков в ревью \" + response.json().id + \" должно быть равно 1\", function () {\r",
									"        pm.expect(1).equal(response.json().likes);\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{evaluatorId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reviews/{{reviewId}}/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить дизлайк отзыву",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const review = await api.addReview(rnd.getReview());\r",
									"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
									"        pm.collectionVariables.set('authorId', review.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    if (error) throw new Error(error);\r",
									"    pm.test(\"Количество дизлайков в ревью \" + response.json().id + \" должно быть равно 1\", function () {\r",
									"        pm.expect(1).equal(response.json().dislikes);\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{evaluatorId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reviews/{{reviewId}}/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}",
								"dislike"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить лайк отзывa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const review = await api.addReview(rnd.getReview());\r",
									"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
									"        pm.collectionVariables.set('authorId', review.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"\r",
									"        let response\r",
									"        let body\r",
									"        const evaluator = pm.collectionVariables.get('evaluatorId') + '';\r",
									"        const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/like\",\r",
									"                method: \"PUT\",\r",
									"                header: { \"Accept\": \"application/json\",\r",
									"                \"Content-Type\": \"application/json\", \r",
									"                \"X-Review-User-Id\": evaluator },\r",
									"                body: body == null ? \"\" : JSON.stringify(body)\r",
									"                };\r",
									"\r",
									"        pm.sendRequest(req, (error, response) => {\r",
									"            if (error) throw new Error(error);\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"let response\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" }\r",
									"            };\r",
									"\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    if (error) throw new Error(error);\r",
									"    pm.test(\"Количество лайков в ревью \" + response.json().id + \" должно быть равно 0\", function () {\r",
									"        pm.expect(0).equal(response.json().likes);\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{evaluatorId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reviews/{{reviewId}}/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить дизлайк отзывa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const review = await api.addReview(rnd.getReview());\r",
									"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
									"        pm.collectionVariables.set('authorId', review.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"\r",
									"        let response\r",
									"        let body\r",
									"        const evaluator = pm.collectionVariables.get('evaluatorId') + '';\r",
									"        const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
									"                method: \"PUT\",\r",
									"                header: { \"Accept\": \"application/json\",\r",
									"                \"Content-Type\": \"application/json\", \r",
									"                \"X-Review-User-Id\": evaluator },\r",
									"                body: body == null ? \"\" : JSON.stringify(body)\r",
									"                };\r",
									"\r",
									"        pm.sendRequest(req, (error, response) => {\r",
									"            if (error) throw new Error(error);\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"let response\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" }\r",
									"            };\r",
									"\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    if (error) throw new Error(error);\r",
									"    pm.test(\"Количество дизлайков в ревью \" + response.json().id + \" должно быть равно 0\", function () {\r",
									"        pm.expect(0).equal(response.json().dislikes);\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{evaluatorId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reviews/{{reviewId}}/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}",
								"dislike"
							]
						}
					},
					"response": []
				},
				{
					"name": "Поставить лайк потом дизлайк отзыву",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const review = await api.addReview(rnd.getReview());\r",
									"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
									"        pm.collectionVariables.set('authorId', review.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"\r",
									"        let response\r",
									"        let body\r",
									"        const evaluator = pm.collectionVariables.get('evaluatorId') + '';\r",
									"        const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/like\",\r",
									"                method: \"PUT\",\r",
									"                header: { \"Accept\": \"application/json\",\r",
									"                \"Content-Type\": \"application/json\", \r",
									"                \"X-Review-User-Id\": evaluator },\r",
									"                body: body == null ? \"\" : JSON.stringify(body)\r",
									"                };\r",
									"\r",
									"        pm.sendRequest(req, (error, response) => {\r",
									"            if (error) throw new Error(error);\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" }\r",
									"            };\r",
									"\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    if (error) throw new Error(error);\r",
									"    pm.test(\"Количество лайков в ревью \" + response.json().id + \" должно быть равно 0\", function () {\r",
									"        pm.expect(0).equal(response.json().likes);\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{evaluatorId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reviews/{{reviewId}}/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}",
								"dislike"
							]
						}
					},
					"response": []
				},
				{
					"name": "Поставить дизлайк потом лайк отзыву",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const review = await api.addReview(rnd.getReview());\r",
									"        pm.collectionVariables.set('evaluatorId', _.random(1001, 2000));\r",
									"        pm.collectionVariables.set('authorId', review.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"\r",
									"        let response\r",
									"        let body\r",
									"        const evaluator = pm.collectionVariables.get('evaluatorId') + '';\r",
									"        const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
									"                method: \"PUT\",\r",
									"                header: { \"Accept\": \"application/json\",\r",
									"                \"Content-Type\": \"application/json\", \r",
									"                \"X-Review-User-Id\": evaluator },\r",
									"                body: body == null ? \"\" : JSON.stringify(body)\r",
									"                };\r",
									"\r",
									"        pm.sendRequest(req, (error, response) => {\r",
									"            if (error) throw new Error(error);\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" }\r",
									"            };\r",
									"\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    if (error) throw new Error(error);\r",
									"    pm.test(\"Количество дизлайков в ревью \" + response.json().id + \" должно быть равно 0\", function () {\r",
									"        pm.expect(0).equal(response.json().dislikes);\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Review-User-Id",
								"value": "{{evaluatorId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reviews/{{reviewId}}/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}",
								"like"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Расчёт статистики",
			"item": [
				{
					"name": "Оценка события по 3 из 3 отзывов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review1.eventId = eventId;\r",
									"        review2.eventId = eventId;\r",
									"        review.mark = 1;\r",
									"        review1.mark = 2;\r",
									"        review2.mark = 8;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        pm.collectionVariables.set('reviewId', review2.id);\r",
									"\r",
									"        const sendRequest = (req) => {\r",
									"            return new Promise((resolve, reject) => {\r",
									"                pm.sendRequest(req, (err, res) => {\r",
									"                    if (err) {\r",
									"                        console.log(err);\r",
									"                        return reject(err);\r",
									"                    }\r",
									"                    resolve(res);\r",
									"                    setTimeout(2500);\r",
									"                });\r",
									"            });\r",
									"        };\r",
									"\r",
									"        (async () => {\r",
									"            for (let i = 10002; i <= 10022; i++) {\r",
									"                let body\r",
									"                const evaluator = i + '';\r",
									"                let request = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/like\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response = await sendRequest(request); // wait for promise to be resolved before continuing\r",
									"                if (i < 10008) {\r",
									"                    const evaluator1 = (i + 10000) + '';\r",
									"                    let request1 = {\r",
									"                        url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
									"                        method: \"PUT\",\r",
									"                        header: { \"Accept\": \"application/json\",\r",
									"                        \"Content-Type\": \"application/json\", \r",
									"                        \"X-Review-User-Id\": evaluator1 },\r",
									"                        body: body == null ? \"\" : JSON.stringify(body)\r",
									"                    }\r",
									"                    const response1 = await sendRequest(request1);\r",
									"                }\r",
									"            }\r",
									"        })();\r",
									"\r",
									"        pm.collectionVariables.set('eventAverageMark', 3.6);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const eventAverageMark = pm.collectionVariables.get('eventAverageMark');\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, averageMark\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('averageMark');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(eventAverageMark.toString()).equals(target.averageMark.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/average-mark/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"average-mark",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Оценка события по 2 из 3 отзывов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review1.eventId = eventId;\r",
									"        review2.eventId = eventId;\r",
									"        review.mark = 1;\r",
									"        review1.mark = 2;\r",
									"        review2.mark = 8;\r",
									"        review2.likes = 4;\r",
									"        review2.dislikes = 8;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        pm.collectionVariables.set('reviewId', review2.id);\r",
									"\r",
									"        const sendRequest = (req) => {\r",
									"            return new Promise((resolve, reject) => {\r",
									"                pm.sendRequest(req, (err, res) => {\r",
									"                    if (err) {\r",
									"                        console.log(err);\r",
									"                        return reject(err);\r",
									"                    }\r",
									"                    resolve(res);\r",
									"                    setTimeout(2500);\r",
									"                });\r",
									"            });\r",
									"        };\r",
									"\r",
									"        (async () => {\r",
									"            for (let i = 10002; i <= 10022; i++) {\r",
									"                let body\r",
									"                const evaluator = i + '';\r",
									"                let request = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response = await sendRequest(request); // wait for promise to be resolved before continuing\r",
									"                if (i < 10008) {\r",
									"                    const evaluator1 = (i + 10000) + '';\r",
									"                    let request1 = {\r",
									"                        url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/like\",\r",
									"                        method: \"PUT\",\r",
									"                        header: { \"Accept\": \"application/json\",\r",
									"                        \"Content-Type\": \"application/json\", \r",
									"                        \"X-Review-User-Id\": evaluator1 },\r",
									"                        body: body == null ? \"\" : JSON.stringify(body)\r",
									"                    }\r",
									"                    const response1 = await sendRequest(request1);\r",
									"                }\r",
									"            }\r",
									"        })();\r",
									"\r",
									"        pm.collectionVariables.set('eventAverageMark', 1.5);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const eventAverageMark = pm.collectionVariables.get('eventAverageMark');\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, averageMark\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('averageMark');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(eventAverageMark.toString()).equals(target.averageMark.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/average-mark/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"average-mark",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Оценка события null, если отзывы нельзя включать в расчёт",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review1.eventId = eventId;\r",
									"        review2.eventId = eventId;\r",
									"        review.mark = 1;\r",
									"        review1.mark = 2;\r",
									"        review2.mark = 8;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"        pm.collectionVariables.set('reviewId1', review1.id);\r",
									"        pm.collectionVariables.set('reviewId2', review2.id);\r",
									"\r",
									"        const sendRequest = (req) => {\r",
									"            return new Promise((resolve, reject) => {\r",
									"                pm.sendRequest(req, (err, res) => {\r",
									"                    if (err) {\r",
									"                        console.log(err);\r",
									"                        return reject(err);\r",
									"                    }\r",
									"                    resolve(res);\r",
									"                    setTimeout(2500);\r",
									"                });\r",
									"            });\r",
									"        };\r",
									"\r",
									"        (async () => {\r",
									"            for (let i = 10002; i <= 10022; i++) {\r",
									"                let body\r",
									"                const evaluator = i + '';\r",
									"                let request = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response = await sendRequest(request); // wait for promise to be resolved before continuing\r",
									"                let request1 = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId1\") + \"/dislike\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response1 = await sendRequest(request1);\r",
									"                let request2 = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId2\") + \"/dislike\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response2 = await sendRequest(request2);\r",
									"            }\r",
									"        })();\r",
									"        \r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const eventAverageMark = pm.collectionVariables.get('eventAverageMark');\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, averageMark\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('averageMark');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(target.averageMark).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/average-mark/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"average-mark",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Оценка автора по 4 из 4 отзывов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const authorId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        let review3 = rnd.getReview();\r",
									"        review.authorId = authorId;\r",
									"        review1.authorId = authorId;\r",
									"        review2.authorId = authorId;\r",
									"        review3.authorId = authorId;\r",
									"        review.mark = 1;\r",
									"        review1.mark = 3;\r",
									"        review2.mark = 9;\r",
									"        review3.mark = 10;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        review3 = await api.addReview(review3);\r",
									"        pm.collectionVariables.set('authorId', review2.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review3.id);\r",
									"\r",
									"        const sendRequest = (req) => {\r",
									"            return new Promise((resolve, reject) => {\r",
									"                pm.sendRequest(req, (err, res) => {\r",
									"                    if (err) {\r",
									"                        console.log(err);\r",
									"                        return reject(err);\r",
									"                    }\r",
									"                    resolve(res);\r",
									"                    setTimeout(2500);\r",
									"                });\r",
									"            });\r",
									"        };\r",
									"\r",
									"        (async () => {\r",
									"            for (let i = 10002; i <= 10022; i++) {\r",
									"                let body\r",
									"                const evaluator = i + '';\r",
									"                let request = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/like\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response = await sendRequest(request); // wait for promise to be resolved before continuing\r",
									"                if (i < 10008) {\r",
									"                    const evaluator1 = (i + 10000) + '';\r",
									"                    let request1 = {\r",
									"                        url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
									"                        method: \"PUT\",\r",
									"                        header: { \"Accept\": \"application/json\",\r",
									"                        \"Content-Type\": \"application/json\", \r",
									"                        \"X-Review-User-Id\": evaluator1 },\r",
									"                        body: body == null ? \"\" : JSON.stringify(body)\r",
									"                    }\r",
									"                    const response1 = await sendRequest(request1);\r",
									"                }\r",
									"            }\r",
									"        })();\r",
									"\r",
									"        pm.collectionVariables.set('authorAverageMark', 5.7);\r",
									"        pm.collectionVariables.set('authorId', authorId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const authorAverageMark = pm.collectionVariables.get('authorAverageMark');\r",
									"const authorId = pm.collectionVariables.get('authorId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: authorId, averageMark\", function () {\r",
									"    pm.expect(target).to.have.property('authorId');\r",
									"    pm.expect(target).to.have.property('averageMark');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(authorId).equals(target.authorId);\r",
									"    pm.expect(authorAverageMark.toString()).equals(target.averageMark.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/average-mark/author/{{authorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"average-mark",
								"author",
								"{{authorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Оценка автора по 3 из 4 отзывов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const authorId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        let review3 = rnd.getReview();\r",
									"        review.authorId = authorId;\r",
									"        review1.authorId = authorId;\r",
									"        review2.authorId = authorId;\r",
									"        review3.authorId = authorId;\r",
									"        review.mark = 1;\r",
									"        review1.mark = 3;\r",
									"        review2.mark = 9;\r",
									"        review3.mark = 10;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        review3 = await api.addReview(review3);\r",
									"        pm.collectionVariables.set('authorId', review2.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review3.id);\r",
									"\r",
									"        const sendRequest = (req) => {\r",
									"            return new Promise((resolve, reject) => {\r",
									"                pm.sendRequest(req, (err, res) => {\r",
									"                    if (err) {\r",
									"                        console.log(err);\r",
									"                        return reject(err);\r",
									"                    }\r",
									"                    resolve(res);\r",
									"                    setTimeout(2500);\r",
									"                });\r",
									"            });\r",
									"        };\r",
									"\r",
									"        (async () => {\r",
									"            for (let i = 10002; i <= 10022; i++) {\r",
									"                let body\r",
									"                const evaluator = i + '';\r",
									"                let request = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response = await sendRequest(request); // wait for promise to be resolved before continuing\r",
									"                if (i < 10008) {\r",
									"                    const evaluator1 = (i + 10000) + '';\r",
									"                    let request1 = {\r",
									"                        url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/like\",\r",
									"                        method: \"PUT\",\r",
									"                        header: { \"Accept\": \"application/json\",\r",
									"                        \"Content-Type\": \"application/json\", \r",
									"                        \"X-Review-User-Id\": evaluator1 },\r",
									"                        body: body == null ? \"\" : JSON.stringify(body)\r",
									"                    }\r",
									"                    const response1 = await sendRequest(request1);\r",
									"                }\r",
									"            }\r",
									"        })();\r",
									"\r",
									"        pm.collectionVariables.set('authorAverageMark', 4.3);\r",
									"        pm.collectionVariables.set('authorId', authorId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const authorAverageMark = pm.collectionVariables.get('authorAverageMark');\r",
									"const authorId = pm.collectionVariables.get('authorId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: authorId, averageMark\", function () {\r",
									"    pm.expect(target).to.have.property('authorId');\r",
									"    pm.expect(target).to.have.property('averageMark');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(authorId).equals(target.authorId);\r",
									"    pm.expect(authorAverageMark.toString()).equals(target.averageMark.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/average-mark/author/{{authorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"average-mark",
								"author",
								"{{authorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Оценка автора null, если отзывы нельзя включать в расчёт",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const authorId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        let review3 = rnd.getReview();\r",
									"        review.authorId = authorId;\r",
									"        review1.authorId = authorId;\r",
									"        review2.authorId = authorId;\r",
									"        review3.authorId = authorId;\r",
									"        review.mark = 1;\r",
									"        review1.mark = 3;\r",
									"        review2.mark = 9;\r",
									"        review3.mark = 10;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        review3 = await api.addReview(review3);\r",
									"        pm.collectionVariables.set('authorId', review2.authorId);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"        pm.collectionVariables.set('reviewId1', review1.id);\r",
									"        pm.collectionVariables.set('reviewId2', review2.id);\r",
									"        pm.collectionVariables.set('reviewId3', review3.id);\r",
									"\r",
									"        const sendRequest = (req) => {\r",
									"            return new Promise((resolve, reject) => {\r",
									"                pm.sendRequest(req, (err, res) => {\r",
									"                    if (err) {\r",
									"                        console.log(err);\r",
									"                        return reject(err);\r",
									"                    }\r",
									"                    resolve(res);\r",
									"                    setTimeout(2500);\r",
									"                });\r",
									"            });\r",
									"        };\r",
									"\r",
									"        (async () => {\r",
									"            for (let i = 10002; i <= 10022; i++) {\r",
									"                let body\r",
									"                const evaluator = i + '';\r",
									"                let request = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId\") + \"/dislike\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response = await sendRequest(request); // wait for promise to be resolved before continuing\r",
									"                let request1 = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId1\") + \"/dislike\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response1 = await sendRequest(request1);\r",
									"                let request2 = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId2\") + \"/dislike\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response2 = await sendRequest(request2);\r",
									"                let request3 = {\r",
									"                    url: \"http://localhost:8090/reviews/\" + pm.collectionVariables.get(\"reviewId3\") + \"/dislike\",\r",
									"                    method: \"PUT\",\r",
									"                    header: { \"Accept\": \"application/json\",\r",
									"                    \"Content-Type\": \"application/json\", \r",
									"                    \"X-Review-User-Id\": evaluator },\r",
									"                    body: body == null ? \"\" : JSON.stringify(body)\r",
									"                }\r",
									"                const response3 = await sendRequest(request3);\r",
									"            }\r",
									"        })();\r",
									"        \r",
									"        pm.collectionVariables.set('authorId', authorId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const authorAverageMark = pm.collectionVariables.get('authorAverageMark');\r",
									"const authorId = pm.collectionVariables.get('authorId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: authorId, averageMark\", function () {\r",
									"    pm.expect(target).to.have.property('authorId');\r",
									"    pm.expect(target).to.have.property('averageMark');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(authorId).equals(target.authorId);\r",
									"    pm.expect(target.averageMark).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/average-mark/author/{{authorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"average-mark",
								"author",
								"{{authorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Статистика по событию при 1 позитивном отзыве",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review.mark = 10;\r",
									"        review = await api.addReview(review);\r",
									"        pm.collectionVariables.set('eventId', review.eventId);\r",
									"\r",
									"        pm.collectionVariables.set('positiveReviewsPercent', 100.0);\r",
									"        pm.collectionVariables.set('negativeReviewsPercent', 0.0);\r",
									"        pm.collectionVariables.set('numberOfReviews', 1);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const positiveReviewsPercent = pm.collectionVariables.get('positiveReviewsPercent');\r",
									"const negativeReviewsPercent = pm.collectionVariables.get('negativeReviewsPercent');\r",
									"const numberOfReviews = pm.collectionVariables.get('numberOfReviews');\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, numberOfReviews, positiveReviewsPercent, negativeReviewsPercent\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('numberOfReviews');\r",
									"    pm.expect(target).to.have.property('positiveReviewsPercent');\r",
									"    pm.expect(target).to.have.property('negativeReviewsPercent');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(numberOfReviews.toString()).equals(target.numberOfReviews.toString());\r",
									"    pm.expect(positiveReviewsPercent.toString()).equals(target.positiveReviewsPercent.toString());\r",
									"    pm.expect(negativeReviewsPercent.toString()).equals(target.negativeReviewsPercent.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/indicators/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"indicators",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Статистика по событию при 1 негативном отзыве",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review.mark = 1;\r",
									"        review = await api.addReview(review);\r",
									"        pm.collectionVariables.set('eventId', review.eventId);\r",
									"\r",
									"        pm.collectionVariables.set('positiveReviewsPercent', 0.0);\r",
									"        pm.collectionVariables.set('negativeReviewsPercent', 100.0);\r",
									"        pm.collectionVariables.set('numberOfReviews', 1);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const positiveReviewsPercent = pm.collectionVariables.get('positiveReviewsPercent');\r",
									"const negativeReviewsPercent = pm.collectionVariables.get('negativeReviewsPercent');\r",
									"const numberOfReviews = pm.collectionVariables.get('numberOfReviews');\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, numberOfReviews, positiveReviewsPercent, negativeReviewsPercent\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('numberOfReviews');\r",
									"    pm.expect(target).to.have.property('positiveReviewsPercent');\r",
									"    pm.expect(target).to.have.property('negativeReviewsPercent');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(numberOfReviews.toString()).equals(target.numberOfReviews.toString());\r",
									"    pm.expect(positiveReviewsPercent.toString()).equals(target.positiveReviewsPercent.toString());\r",
									"    pm.expect(negativeReviewsPercent.toString()).equals(target.negativeReviewsPercent.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/indicators/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"indicators",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Статистика по событию при отсутствии отзывов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const positiveReviewsPercent = pm.collectionVariables.get('positiveReviewsPercent');\r",
									"const negativeReviewsPercent = pm.collectionVariables.get('negativeReviewsPercent');\r",
									"const numberOfReviews = pm.collectionVariables.get('numberOfReviews');\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, numberOfReviews, positiveReviewsPercent, negativeReviewsPercent\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('numberOfReviews');\r",
									"    pm.expect(target).to.have.property('positiveReviewsPercent');\r",
									"    pm.expect(target).to.have.property('negativeReviewsPercent');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(target.numberOfReviews).to.be.null;\r",
									"    pm.expect(target.positiveReviewsPercent).to.be.null;\r",
									"    pm.expect(target.negativeReviewsPercent).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/indicators/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"indicators",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Статистика по событию при 2 хороших и 1 плохом отзыве",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review1.eventId = eventId;\r",
									"        review2.eventId = eventId;\r",
									"        review.mark = 1;\r",
									"        review1.mark = 7;\r",
									"        review2.mark = 8;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        pm.collectionVariables.set('eventId', review.eventId);\r",
									"\r",
									"        pm.collectionVariables.set('positiveReviewsPercent', 66.6);\r",
									"        pm.collectionVariables.set('negativeReviewsPercent', 33.3);\r",
									"        pm.collectionVariables.set('numberOfReviews', 3);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const positiveReviewsPercent = pm.collectionVariables.get('positiveReviewsPercent');\r",
									"const negativeReviewsPercent = pm.collectionVariables.get('negativeReviewsPercent');\r",
									"const numberOfReviews = pm.collectionVariables.get('numberOfReviews');\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, numberOfReviews, positiveReviewsPercent, negativeReviewsPercent\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('numberOfReviews');\r",
									"    pm.expect(target).to.have.property('positiveReviewsPercent');\r",
									"    pm.expect(target).to.have.property('negativeReviewsPercent');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(numberOfReviews.toString()).equals(target.numberOfReviews.toString());\r",
									"    pm.expect(positiveReviewsPercent.toString()).equals(target.positiveReviewsPercent.toString());\r",
									"    pm.expect(negativeReviewsPercent.toString()).equals(target.negativeReviewsPercent.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/indicators/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"indicators",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Статистика по событию при 1 хорошем и 2 плохих отзывах",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review1.eventId = eventId;\r",
									"        review2.eventId = eventId;\r",
									"        review.mark = 1;\r",
									"        review1.mark = 2;\r",
									"        review2.mark = 8;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        pm.collectionVariables.set('eventId', review.eventId);\r",
									"\r",
									"        pm.collectionVariables.set('positiveReviewsPercent', 33.3);\r",
									"        pm.collectionVariables.set('negativeReviewsPercent', 66.6);\r",
									"        pm.collectionVariables.set('numberOfReviews', 3);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const positiveReviewsPercent = pm.collectionVariables.get('positiveReviewsPercent');\r",
									"const negativeReviewsPercent = pm.collectionVariables.get('negativeReviewsPercent');\r",
									"const numberOfReviews = pm.collectionVariables.get('numberOfReviews');\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, numberOfReviews, positiveReviewsPercent, negativeReviewsPercent\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('numberOfReviews');\r",
									"    pm.expect(target).to.have.property('positiveReviewsPercent');\r",
									"    pm.expect(target).to.have.property('negativeReviewsPercent');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(numberOfReviews.toString()).equals(target.numberOfReviews.toString());\r",
									"    pm.expect(positiveReviewsPercent.toString()).equals(target.positiveReviewsPercent.toString());\r",
									"    pm.expect(negativeReviewsPercent.toString()).equals(target.negativeReviewsPercent.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/indicators/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"indicators",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Списки хороших/плохих отзывов по событию (в базе 4 + / 1 - )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        let review3 = rnd.getReview();\r",
									"        let review4 = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review1.eventId = eventId;\r",
									"        review2.eventId = eventId;\r",
									"        review3.eventId = eventId;\r",
									"        review4.eventId = eventId;\r",
									"        review.mark = 1;\r",
									"        review1.mark = 7;\r",
									"        review2.mark = 8;\r",
									"        review3.mark = 6;\r",
									"        review4.mark = 9;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        review3 = await api.addReview(review3);\r",
									"        review4 = await api.addReview(review4);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"        pm.collectionVariables.set('lengthBestReviews', 3);\r",
									"        pm.collectionVariables.set('lengthWorstReviews', 1);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"        pm.collectionVariables.set('reviewId1', review1.id);\r",
									"        pm.collectionVariables.set('reviewId2', review2.id);\r",
									"        pm.collectionVariables.set('reviewId3', review3.id);\r",
									"        pm.collectionVariables.set('reviewId4', review4.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, bestReviews, worstReviews\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('bestReviews');\r",
									"    pm.expect(target).to.have.property('worstReviews');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(pm.collectionVariables.get('lengthBestReviews').toString()).equals(target.bestReviews.length.toString());\r",
									"    pm.expect(pm.collectionVariables.get('lengthWorstReviews').toString()).equals(target.worstReviews.length.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId4').toString()).equals(target.bestReviews[0].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId2').toString()).equals(target.bestReviews[1].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId1').toString()).equals(target.bestReviews[2].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId').toString()).equals(target.worstReviews[0].id.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/best-and-worst/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"best-and-worst",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Списки хороших/плохих отзывов по событию (в базе 4 + / 0 - )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        let review3 = rnd.getReview();\r",
									"        let review4 = rnd.getReview();\r",
									"        review1.eventId = eventId;\r",
									"        review2.eventId = eventId;\r",
									"        review3.eventId = eventId;\r",
									"        review4.eventId = eventId;\r",
									"        review1.mark = 7;\r",
									"        review2.mark = 8;\r",
									"        review3.mark = 6;\r",
									"        review4.mark = 9;\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        review3 = await api.addReview(review3);\r",
									"        review4 = await api.addReview(review4);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"        pm.collectionVariables.set('lengthBestReviews', 3);\r",
									"        pm.collectionVariables.set('lengthWorstReviews', 0);\r",
									"        pm.collectionVariables.set('reviewId1', review1.id);\r",
									"        pm.collectionVariables.set('reviewId2', review2.id);\r",
									"        pm.collectionVariables.set('reviewId3', review3.id);\r",
									"        pm.collectionVariables.set('reviewId4', review4.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, bestReviews, worstReviews\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('bestReviews');\r",
									"    pm.expect(target).to.have.property('worstReviews');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(pm.collectionVariables.get('lengthBestReviews').toString()).equals(target.bestReviews.length.toString());\r",
									"    pm.expect(pm.collectionVariables.get('lengthWorstReviews').toString()).equals(target.worstReviews.length.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId4').toString()).equals(target.bestReviews[0].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId2').toString()).equals(target.bestReviews[1].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId1').toString()).equals(target.bestReviews[2].id.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/best-and-worst/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"best-and-worst",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Списки хороших/плохих отзывов по событию (в базе 4 - / 1 + )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        let review3 = rnd.getReview();\r",
									"        let review4 = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review1.eventId = eventId;\r",
									"        review2.eventId = eventId;\r",
									"        review3.eventId = eventId;\r",
									"        review4.eventId = eventId;\r",
									"        review.mark = 5;\r",
									"        review1.mark = 3;\r",
									"        review2.mark = 1;\r",
									"        review3.mark = 2;\r",
									"        review4.mark = 9;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        review3 = await api.addReview(review3);\r",
									"        review4 = await api.addReview(review4);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"        pm.collectionVariables.set('lengthBestReviews', 1);\r",
									"        pm.collectionVariables.set('lengthWorstReviews', 3);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"        pm.collectionVariables.set('reviewId1', review1.id);\r",
									"        pm.collectionVariables.set('reviewId2', review2.id);\r",
									"        pm.collectionVariables.set('reviewId3', review3.id);\r",
									"        pm.collectionVariables.set('reviewId4', review4.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, bestReviews, worstReviews\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('bestReviews');\r",
									"    pm.expect(target).to.have.property('worstReviews');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(pm.collectionVariables.get('lengthBestReviews').toString()).equals(target.bestReviews.length.toString());\r",
									"    pm.expect(pm.collectionVariables.get('lengthWorstReviews').toString()).equals(target.worstReviews.length.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId4').toString()).equals(target.bestReviews[0].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId2').toString()).equals(target.worstReviews[0].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId3').toString()).equals(target.worstReviews[1].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId1').toString()).equals(target.worstReviews[2].id.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/best-and-worst/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"best-and-worst",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Списки хороших/плохих отзывов по событию (в базе 4 - / 0 + )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"        let review = rnd.getReview();\r",
									"        let review1 = rnd.getReview();\r",
									"        let review2 = rnd.getReview();\r",
									"        let review3 = rnd.getReview();\r",
									"        review.eventId = eventId;\r",
									"        review1.eventId = eventId;\r",
									"        review2.eventId = eventId;\r",
									"        review3.eventId = eventId;\r",
									"        review.mark = 5;\r",
									"        review1.mark = 3;\r",
									"        review2.mark = 1;\r",
									"        review3.mark = 2;\r",
									"        review = await api.addReview(review);\r",
									"        review1 = await api.addReview(review1);\r",
									"        review2 = await api.addReview(review2);\r",
									"        review3 = await api.addReview(review3);\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"        pm.collectionVariables.set('lengthBestReviews', 0);\r",
									"        pm.collectionVariables.set('lengthWorstReviews', 3);\r",
									"        pm.collectionVariables.set('reviewId', review.id);\r",
									"        pm.collectionVariables.set('reviewId1', review1.id);\r",
									"        pm.collectionVariables.set('reviewId2', review2.id);\r",
									"        pm.collectionVariables.set('reviewId3', review3.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, bestReviews, worstReviews\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('bestReviews');\r",
									"    pm.expect(target).to.have.property('worstReviews');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(pm.collectionVariables.get('lengthBestReviews').toString()).equals(target.bestReviews.length.toString());\r",
									"    pm.expect(pm.collectionVariables.get('lengthWorstReviews').toString()).equals(target.worstReviews.length.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId2').toString()).equals(target.worstReviews[0].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId3').toString()).equals(target.worstReviews[1].id.toString());\r",
									"    pm.expect(pm.collectionVariables.get('reviewId1').toString()).equals(target.worstReviews[2].id.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/best-and-worst/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"best-and-worst",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Списки хороших/плохих отзывов по событию при отсутствии отзывов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const eventId = _.random(1001, 10000);\r",
									"\r",
									"        pm.collectionVariables.set('eventId', eventId);\r",
									"        pm.collectionVariables.set('lengthBestReviews', 0);\r",
									"        pm.collectionVariables.set('lengthWorstReviews', 0);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const eventId = pm.collectionVariables.get('eventId');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: eventId, bestReviews, worstReviews\", function () {\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('bestReviews');\r",
									"    pm.expect(target).to.have.property('worstReviews');\r",
									"});\r",
									"\r",
									"pm.test(\"Данных ответа должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(eventId).equals(target.eventId);\r",
									"    pm.expect(pm.collectionVariables.get('lengthBestReviews').toString()).equals(target.bestReviews.length.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/analytics/best-and-worst/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews",
								"analytics",
								"best-and-worst",
								"event",
								"{{eventId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Добавление нового отзыва",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let review;\r",
							"    try {\r",
							"        review = rnd.getReview();\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(review),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorId');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('username');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('content');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('updatedOn');\r",
							"pm.expect(target).to.have.property('mark');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.updatedOn).to.be.null;\r",
							"    pm.expect(target.createdOn).to.not.be.null;\r",
							"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
							"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должна быть равна 0');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление отзыва",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        let review = await api.addReview(rnd.getReview());\r",
							"        let updatedReview = rnd.getReview();\r",
							"        updatedReview.authorId = review.authorId;\r",
							"        updatedReview.eventId = review.eventId;\r",
							"        updatedReview.createdOn = review.createdOn;\r",
							"        updatedReview.mark = review.mark;\r",
							"        pm.collectionVariables.set('response', updatedReview);\r",
							"        pm.collectionVariables.set('authorId', review.authorId);\r",
							"        pm.collectionVariables.set('reviewId', review.id);\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: updatedReview,\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const reviewId = pm.collectionVariables.get('reviewId');\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Отзыв должен содержать поля: id, authorId, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('authorId');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('username');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('content');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('updatedOn');\r",
							"pm.expect(target).to.have.property('mark');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(reviewId).equals(target.id, 'Id отзыва должно соответствовать изменяемому отзыву');\r",
							"    pm.expect(target.updatedOn).to.not.be.null;\r",
							"    pm.expect(Date.parse(target.updatedOn)).to.be.above(Date.parse(target.createdOn));\r",
							"    pm.expect(source.authorId).equal(target.authorId, 'Id автора должно соответствовать изменяемому отзыву');\r",
							"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать изменяемому отзыву');\r",
							"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать отправленному в запросе');\r",
							"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать изменяемому отзыву');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Review-User-Id",
						"value": "{{authorId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews/:reviewId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":reviewId"
					],
					"variable": [
						{
							"key": "reviewId",
							"value": "{{reviewId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение отзыва по id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        let review = await api.addReview(rnd.getReview());\r",
							"        pm.collectionVariables.set('response', review);\r",
							"        pm.collectionVariables.set('reviewId', review.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Отзыв должен содержать поля: id, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('username');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('content');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('updatedOn');\r",
							"pm.expect(target).to.have.property('mark');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.id).equals(target.id, 'Id отзыва должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.eventId).equal(target.eventId, 'Id мероприятия должно соответствовать искомому отзыву');\r",
							"    pm.expect(source.username).equal(target.username, 'Имя автора должно соответствовать искомому отзыву');\r",
							"    pm.expect(source.title).equal(target.title, 'Заголовок отзыва должен соответствовать искомому отзыву');\r",
							"    pm.expect(source.content).equal(target.content, 'Содержание отзыва должно соответствовать искомому отзыву');\r",
							"    pm.expect(Date.parse(source.createdOn)).equal(Date.parse(target.createdOn), 'Время создания отзыва должно соответствовать искомому отзыву');\r",
							"    pm.expect(source.mark).equal(target.mark, 'Оценка отзыва должно соответствовать искомому отзыву');\r",
							"    pm.expect(target.updatedOn).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reviews/:reviewId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":reviewId"
					],
					"variable": [
						{
							"key": "reviewId",
							"value": "{{reviewId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить отзывы по событию",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const eventId = _.random(1001, 10000);\r",
							"        let review = rnd.getReview();\r",
							"        let review1 = rnd.getReview();\r",
							"        let review2 = rnd.getReview();\r",
							"        review.eventId = eventId;\r",
							"        review1.eventId = eventId;\r",
							"        review2.eventId = eventId;\r",
							"        review = await api.addReview(review);\r",
							"        review1 = await api.addReview(review1);\r",
							"        review2 = await api.addReview(review2);\r",
							"        pm.collectionVariables.set('reviewCount', 3);\r",
							"        pm.collectionVariables.set('eventId', eventId);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const reviewCount = pm.collectionVariables.get('reviewCount');\r",
							"const eventId = pm.collectionVariables.get('eventId');\r",
							"const target = pm.response.json();\r",
							"let reviewWithEventId = 0;\r",
							"target.forEach(function(element){if (element.eventId == eventId) reviewWithEventId = reviewWithEventId + 1});\r",
							"\r",
							"pm.test(\"Отзыв должен содержать поля: id, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
							"pm.expect(target[0]).to.have.property('id');\r",
							"pm.expect(target[0]).to.have.property('eventId');\r",
							"pm.expect(target[0]).to.have.property('username');\r",
							"pm.expect(target[0]).to.have.property('title');\r",
							"pm.expect(target[0]).to.have.property('content');\r",
							"pm.expect(target[0]).to.have.property('createdOn');\r",
							"pm.expect(target[0]).to.have.property('updatedOn');\r",
							"pm.expect(target[0]).to.have.property('mark');\r",
							"pm.expect(target[0]).to.not.have.any.keys('authorId');\r",
							"});\r",
							"\r",
							"pm.test(\"Количество данных в ответе должно соответствовать количеству сохранённых отзывов по искомому мероприятию\", function () {\r",
							"    pm.expect(reviewCount).equals(target.length);\r",
							"    pm.expect(reviewCount).equals(reviewWithEventId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reviews?page=0&size=10&eventId={{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews"
					],
					"query": [
						{
							"key": "page",
							"value": "0",
							"description": "номер страницы"
						},
						{
							"key": "size",
							"value": "10",
							"description": "количество отзывов в странице"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}",
							"description": "id события, отзывы которого получают"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить отзывы по событию page = 1, size = 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const eventId = _.random(1001, 10000);\r",
							"        let review = rnd.getReview();\r",
							"        let review1 = rnd.getReview();\r",
							"        let review2 = rnd.getReview();\r",
							"        review.eventId = eventId;\r",
							"        review1.eventId = eventId;\r",
							"        review2.eventId = eventId;\r",
							"        review = await api.addReview(review);\r",
							"        review1 = await api.addReview(review1);\r",
							"        review2 = await api.addReview(review2);\r",
							"        pm.collectionVariables.set('reviewCount', 1);\r",
							"        pm.collectionVariables.set('eventId', eventId);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const reviewCount = pm.collectionVariables.get('reviewCount');\r",
							"const eventId = pm.collectionVariables.get('eventId');\r",
							"const target = pm.response.json();\r",
							"let reviewWithEventId = 0;\r",
							"target.forEach(function(element){if (element.eventId == eventId) reviewWithEventId = reviewWithEventId + 1});\r",
							"\r",
							"pm.test(\"Отзыв должен содержать поля: id, eventId, username, title, content, createdOn, updatedOn, mark\", function () {\r",
							"pm.expect(target[0]).to.have.property('id');\r",
							"pm.expect(target[0]).to.have.property('eventId');\r",
							"pm.expect(target[0]).to.have.property('username');\r",
							"pm.expect(target[0]).to.have.property('title');\r",
							"pm.expect(target[0]).to.have.property('content');\r",
							"pm.expect(target[0]).to.have.property('createdOn');\r",
							"pm.expect(target[0]).to.have.property('updatedOn');\r",
							"pm.expect(target[0]).to.have.property('mark');\r",
							"pm.expect(target[0]).to.not.have.any.keys('authorId');\r",
							"});\r",
							"\r",
							"pm.test(\"Количество данных в ответе должно соответствовать количеству сохранённых отзывов по искомому мероприятию\", function () {\r",
							"    pm.expect(reviewCount.toString()).equals(target.length.toString());\r",
							"    pm.expect(reviewCount.toString()).equals(reviewWithEventId.toString());\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reviews?page=1&size=2&eventId={{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews"
					],
					"query": [
						{
							"key": "page",
							"value": "1",
							"description": "номер страницы"
						},
						{
							"key": "size",
							"value": "2",
							"description": "количество отзывов в странице"
						},
						{
							"key": "eventId",
							"value": "{{eventId}}",
							"description": "id события, отзывы которого получают"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удалить отзыв по id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const review = await api.addReview(rnd.getReview());\r",
							"        const foundedReview = await api.findReview(review.id);\r",
							"        pm.collectionVariables.set('response', foundedReview);\r",
							"        pm.collectionVariables.set('authorId', review.authorId);\r",
							"        pm.collectionVariables.set('reviewId', review.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"let source = pm.collectionVariables.get('response');\r",
							"\r",
							"pm.test(\"Подборка должна быть найдена до удаления\", function () {\r",
							"    pm.expect(source).not.to.be.null;\r",
							"});\r",
							"\r",
							"let body\r",
							"const req = {\r",
							"                url: \"http://localhost:8090/reviews?from=0&size=1000&eventId=\" + pm.collectionVariables.get(\"eventId\"),\r",
							"                method: \"GET\",\r",
							"                body: body == null ? \"\" : JSON.stringify(body),\r",
							"                header: { \"Content-Type\": \"application/json\" },\r",
							"            };\r",
							"pm.sendRequest(req, (error, response) => {\r",
							"    pm.test(\"Подборка должна быть удалена после выполнения запроса\", function(){\r",
							"        response.json().forEach(element => {\r",
							"            if(element.id == pm.collectionVariables.get('reviewId')){\r",
							"                throw new Error(\"Подборка все еще находится в списке существующих\");\r",
							"            }\r",
							"        })\r",
							"    });\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Review-User-Id",
						"value": "{{authorId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/reviews/:reviewId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":reviewId"
					],
					"variable": [
						{
							"key": "reviewId",
							"value": "{{reviewId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8090\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"    \r",
					"    async addReview(review, verbose=null) {\r",
					"        return this.post(\"/reviews\", review, \"Ошибка при добавлении нового отзыва: \", verbose);\r",
					"    }\r",
					"\r",
					"    async findReview(reviewId, verbose=null) {\r",
					"        return this.get('/reviews/' + reviewId, null, \"Ошибка при поиске отзыва по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getReview() {\r",
					"        return {\r",
					"            authorId: _.random(1, 1000),\r",
					"            eventId: _.random(1, 1000),\r",
					"            username: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 120),\r",
					"            content: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(1, 10000),\r",
					"            createdOn: null,\r",
					"            updatedOn: null,\r",
					"            mark: _.random(1, 10)\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8085",
			"type": "string"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "reviewId",
			"value": "1",
			"type": "number"
		},
		{
			"key": "authorId",
			"value": "1",
			"type": "number"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "eventId",
			"value": "1",
			"type": "number"
		},
		{
			"key": "reviewCount",
			"value": "1",
			"type": "number"
		},
		{
			"key": "savedReview",
			"value": ""
		},
		{
			"key": "evaluatorId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "opinion",
			"value": "like",
			"type": "string"
		},
		{
			"key": "eventAverageMark",
			"value": "1.0",
			"type": "string"
		},
		{
			"key": "reviewId1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "reviewId2",
			"value": "1",
			"type": "string"
		},
		{
			"key": "reviewId3",
			"value": "1",
			"type": "string"
		},
		{
			"key": "reviewId4",
			"value": "1",
			"type": "string"
		},
		{
			"key": "authorAverageMark",
			"value": "1"
		},
		{
			"key": "numberOfReviews",
			"value": "1",
			"type": "string"
		},
		{
			"key": "positiveReviewsPercent",
			"value": "0.0",
			"type": "string"
		},
		{
			"key": "negativeReviewsPercent",
			"value": "0.0",
			"type": "string"
		},
		{
			"key": "lengthBestReviews",
			"value": "0",
			"type": "string"
		},
		{
			"key": "lengthWorstReviews",
			"value": "0",
			"type": "string"
		}
	]
}